-- declare
--     n_workflow_process_id NVARCHAR2(100);
--     n_tale_name NVARCHAR2(100);
--     n_field_name NVARCHAR2(100);
--     n_field_type NVARCHAR2(100);
--     n_value NVARCHAR2(200);
-- begin
--     n_workflow_process_id := :workflow_process_id;
--     -- List all: WCF_TABLE_NAME, WCF_FIELD_NAME, WCF_FIELD_TYPE, WCF_VALUE of workflow_conditions WHERE WF_PROCESS_ID = n_workflow_process_id
--     for rec in (
--         select * from WORKFLOW_CONDITIONS 
--         join WORKFLOW_CONDITION_FIELD on WORKFLOW_CONDITIONS.WCF_COLUMN = WORKFLOW_CONDITION_FIELD.WCF_ID
--         join WORKFLOW_CONDITION_FIELD_VALUE on WORKFLOW_CONDITIONS.WC_VALUE_1 = WORKFLOW_CONDITION_FIELD_VALUE.WCFV_ID
--         where WF_PROCESS_ID = n_workflow_process_id
--     )loop
--         -- log all value
--         n_tale_name := rec.WCF_TABLE_NAME;
--         n_field_name := rec.WCF_FIELD_NAME;
--         n_field_type := rec.WCF_FIELD_TYPE;
--         n_value := rec.WCFV_VALUE;

--         -- log all value
--         dbms_output.put_line('n_tale_name: ' || n_tale_name);
--         dbms_output.put_line('n_field_name: ' || n_field_name);
--         dbms_output.put_line('n_field_type: ' || n_field_type);
--         dbms_output.put_line('n_value: ' || n_value);

--     end loop
-- end;

----------------------------------------------------------------------------------------------------------------------------------------------------------------

-- table: WORKFLOW
-- table: WORKFLOW_CONDITIONS
-- table: WORKFLOW_CONDITION_FIELD
-- table: WORKFLOW_CONDITION_FIELD_VALUE

--   CREATE TABLE "WORKFLOW_CONDITIONS" 
--    (	"WC_ID" NUMBER(10,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
-- 	"WF_PROCESS_ID" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
-- 	"WC_TABLE_NAME" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
-- 	"WCF_COLUMN" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
-- 	"WC_COMPARE_TYPE" NUMBER(2,0), 
-- 	"WC_VALUE_1" NVARCHAR2(200) COLLATE "USING_NLS_COMP", 
-- 	"WC_VALUE_2" NVARCHAR2(200) COLLATE "USING_NLS_COMP", 
-- 	 CONSTRAINT "WORKFLOW_CONDITIONS_PK" PRIMARY KEY ("WC_ID")
--   USING INDEX  ENABLE
--    )  DEFAULT COLLATION "USING_NLS_COMP" ;

--   CREATE TABLE "WORKFLOW_CONDITION_FIELD" 
--    (	"WCF_ID" NUMBER(7,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
-- 	"WCF_FEATURE" NVARCHAR2(50) COLLATE "USING_NLS_COMP", 
-- 	"WCF_FIELD_NAME" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
-- 	"WCF_FIELD_TYPE" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
-- 	"WCF_FIELD_NAME_DISPLAY" NVARCHAR2(100) COLLATE "USING_NLS_COMP", 
-- 	"WCF_TABLE_NAME" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
-- 	 CONSTRAINT "WORKFLOW_CONDITION_FIELD_PK" PRIMARY KEY ("WCF_ID")
--   USING INDEX  ENABLE
--    )  DEFAULT COLLATION "USING_NLS_COMP" ;

--   CREATE TABLE "WORKFLOW_CONDITION_FIELD_VALUE" 
--    (	"WCFV_ID" NUMBER(6,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
-- 	"WCF_ID" NVARCHAR2(50) COLLATE "USING_NLS_COMP", 
-- 	"WCFV_VALUE" NVARCHAR2(200) COLLATE "USING_NLS_COMP", 
-- 	"WCFV_VALUE_DISPLAY" NVARCHAR2(200) COLLATE "USING_NLS_COMP", 
-- 	 CONSTRAINT "WORKFLOW_CONDITION_FIELD_VALUE_PK" PRIMARY KEY ("WCFV_ID")
--   USING INDEX  ENABLE
--    )  DEFAULT COLLATION "USING_NLS_COMP" ;

--    COMMENT ON COLUMN "WORKFLOW_APPROVAL"."WF_PROCESS_ID" IS 'mã của 1 workflow';
--    COMMENT ON COLUMN "WORKFLOW_APPROVAL"."WA_SEQUENCE_NUMBER" IS 'thứ tự duyệt của 1 workflow';
--    COMMENT ON COLUMN "WORKFLOW_APPROVAL"."WA_GROUP" IS 'wa_group trong bảng EMPLOYEE';
--    COMMENT ON COLUMN "WORKFLOW_APPROVAL"."WA_USER" IS 'save email of each wa_group (only 1 mail)';

--    COMMENT ON COLUMN "WORKFLOW_CONDITIONS"."WC_COMPARE_TYPE" IS '1: equal | 2: not equal | 3: larger | 4: larger or equal | 5: smaller | 6: smaller or equal | 7: in between';
--    COMMENT ON TABLE "WORKFLOW_CONDITIONS"  IS 'Config conditions for workflow';

--    COMMENT ON COLUMN "WORKFLOW_CONDITION_FIELD"."WCF_FEATURE" IS 'Feature apply: scholarship | overtime';
--    COMMENT ON COLUMN "WORKFLOW_CONDITION_FIELD"."WCF_FIELD_TYPE" IS '1: string | 2:number | 3:date';
--    COMMENT ON COLUMN "WORKFLOW_CONDITION_FIELD"."WCF_FIELD_NAME_DISPLAY" IS 'Name display on page config';

--    COMMENT ON TABLE "WORKFLOW_CONDITION_FIELD_VALUE"  IS 'Value Set for Workflow Condition Fields';

----------------------------------------------------------------------------------------------------------------------------------------------------------------


-- function wf_check_condition is to check if the request is match the conditions of Workflow or not
-- return 1 if match, 0 if not match
create or replace function wf_check_conditions(p_emp_request_id in number, p_wf_process_id in varchar2) return number is
    n_workflow_process_id varchar2(100);
    n_table_name varchar2(100);
    n_field_name varchar2(100);
    n_field_type varchar2(100);
    n_value varchar2(200);
    n_compare_type number;
    n_result number;
    n_count number;

    n_table_id number;
begin
    -- loop through all conditions of workflow
    -- get table name, field name, field type, value, compare type
    -- then check if the request is match the condition or not
    -- if all conditions are match, return 1
    -- if not, return 0

    n_result := 1; -- default is 1 (match)

    -- if the workflow do not have any condition, return 1 (match)
    select count(*) into n_count from WORKFLOW_CONDITIONS where WF_PROCESS_ID = p_wf_process_id;
    if n_count = 0 then
        return 1;
    end if;

    for rec in (
        select * from WORKFLOW_CONDITIONS 
        join WORKFLOW_CONDITION_FIELD on WORKFLOW_CONDITIONS.WCF_COLUMN = WORKFLOW_CONDITION_FIELD.WCF_ID
        join WORKFLOW_CONDITION_FIELD_VALUE on WORKFLOW_CONDITIONS.WC_VALUE_1 = WORKFLOW_CONDITION_FIELD_VALUE.WCFV_ID
        where WF_PROCESS_ID = p_wf_process_id
    )loop
        -- get value of table name, field name, field type, value, compare type
        n_table_name := rec.WCF_TABLE_NAME;
        n_field_name := rec.WCF_FIELD_NAME;
        n_field_type := rec.WCF_FIELD_TYPE;
        n_value := rec.WCFV_VALUE;
        n_compare_type := rec.WC_COMPARE_TYPE;

        -- get table id
        if lower(n_table_name) = 'emp_requests' then
            -- if table name is emp_requests, table id is emp_request_id
            n_table_id := p_emp_request_id;
        else 
            -- if table name is not emp_requests, table id is request_detail_id
            select REQUEST_DETAIL_ID into n_table_id from EMP_REQUESTS where ID = p_emp_request_id;
        end if;


        -- [TO-DO] check if the request is match the condition or not

        -- log all value
        dbms_output.put_line('n_table_name: ' || n_table_name);
        dbms_output.put_line('n_field_name: ' || n_field_name);
        dbms_output.put_line('n_field_type: ' || n_field_type);
        dbms_output.put_line('n_value: ' || n_value);
        dbms_output.put_line('n_compare_type: ' || n_compare_type);
    end loop;

    return n_result;
end;    

----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- testing

declare
    n_emp_request_id number;
    n_wf_process_id varchar2(100);
    n_result number;
begin
    n_emp_request_id := 1;
    n_wf_process_id := 'WF0001';

    n_result := wf_check_conditions(n_emp_request_id, n_wf_process_id);
    dbms_output.put_line('n_result: ' || n_result);
end;